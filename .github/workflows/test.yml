name: Test Recipes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate-yaml:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate recipes.yaml
        run: |
          python3 -c "
import yaml
with open('recipes.yaml', 'r') as f:
    yaml.safe_load(f)
print('✅ recipes.yaml is valid')
"
      
      - name: Check recipe files exist
        run: |
          echo "Checking all recipe files exist..."
          python3 -c "
import yaml
import os

with open('recipes.yaml', 'r') as f:
    data = yaml.safe_load(f)

missing = []
for recipe in data['recipes']:
    script_path = 'recipes/' + recipe['script']
    if not os.path.exists(script_path):
        missing.append(script_path)
        print(f'❌ Missing recipe file: {script_path}')
    else:
        print(f'✓ Found: {script_path}')

if missing:
    exit(1)
else:
    print('✅ All recipe files exist')
"

  test-recipes:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        recipe:
          - base
          - wifi
          - git
          - ripgrep
          - jaq
          - lazygit
          - fzf
          - gh
          - golang
          - rust
          - nvm
          - bruno
          - cursor
          - cascadia-font
          - clickup
          - youtube-downloader
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Create test data directory
        run: |
          chmod +x resetup
          ./resetup init
      
      - name: Test recipe - ${{ matrix.recipe }}
        run: |
          chmod +x tests/test-recipe.sh
          ./tests/test-recipe.sh ${{ matrix.recipe }}

  test-encryption:
    runs-on: ubuntu-latest
    # Force refresh of workflow cache
    steps:
      - uses: actions/checkout@v4
      
      - name: Create test data
        run: |
          chmod +x resetup
          ./resetup init
          
          # Add additional test files
          echo "test-key" > data/files/.ssh/test_key
      
      - name: Test encryption/decryption
        run: |
          # Test encryption (mimic what scripts/enc does but with -pass for CI)
          echo "# encrypt data"
          tar -czf data.tar.gz data/ > /dev/null
          openssl aes256 -pbkdf2 -salt -in data.tar.gz -out data.aes256 -pass pass:test-password
          rm data.tar.gz
          echo "✅ Encryption successful"
          
          # Verify encrypted file exists
          if [ ! -f "data.aes256" ]; then
            echo "❌ Encryption failed - data.aes256 not found"
            exit 1
          fi
          
          # Remove original data
          rm -rf data/
          
          # Test decryption
          openssl enc -d -aes256 -pbkdf2 -salt -in data.aes256 -out data.tar.gz -pass pass:test-password
          tar -xzvf data.tar.gz
          rm data.tar.gz
          
          # Verify decryption
          if [ ! -f "data/config/master.cnf" ]; then
            echo "❌ Decryption failed"
            exit 1
          fi
          
          echo "✅ Encryption/decryption test passed"

  test-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check circular dependencies
        run: |
          python3 tests/check-dependencies.py
      
      - name: Test dependency resolution
        run: |
          # Test that dependencies are properly resolved
          chmod +x tests/test-dependencies.sh
          ./tests/test-dependencies.sh

  integration-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create test environment
        run: |
          chmod +x resetup
          ./resetup init
          
          # Create dummy SSH key for testing
          ssh-keygen -t ed25519 -f data/files/.ssh/id_ed25519 -N "" -C "test@example.com"
      
      - name: Run integration test
        run: |
          chmod +x tests/integration-test.sh
          ./tests/integration-test.sh
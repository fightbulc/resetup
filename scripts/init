#!/usr/bin/env bash

# VARS
CWD=$(pwd)
BASE_PATH=$(dirname $(dirname $(readlink -f $0)))

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse machine parameter (required)
if [ $# -lt 1 ]; then
    echo -e "${RED}‚ùå Error: Machine name is required${NC}"
    echo "Usage: resetup init <machine>"
    exit 1
fi

MACHINE="$1"

echo -e "${BLUE}üöÄ Initializing machine '$MACHINE'...${NC}"

# Set up paths
MACHINE_DIR="$BASE_PATH/machines/$MACHINE"
FILES_DIR="$MACHINE_DIR/files"
SSH_DIR="$FILES_DIR/.ssh"
MASTER_CNF="$MACHINE_DIR/master.cnf"
COOKBOOK_YAML="$MACHINE_DIR/cookbook.yaml"
MACHINE_README="$MACHINE_DIR/README.md"

echo ""
echo -e "${YELLOW}Creating directory structure...${NC}"
mkdir -p "$MACHINE_DIR"
mkdir -p "$FILES_DIR"
mkdir -p "$SSH_DIR"

# Create master.cnf from template
if [ ! -f "$MASTER_CNF" ]; then
    echo -e "${YELLOW}Creating master configuration file...${NC}"
    cat > "$MASTER_CNF" << 'EOF'
#!/usr/bin/env bash

# Master configuration file for resetup
# Customize with your personal settings

# WiFi Configuration (optional)
export WIFI_ID="Your-WiFi-Network"
export WIFI_PASSWORD="your-wifi-password"

# Git Configuration
export GIT_USERNAME="Your Name"
export GIT_EMAIL="your.email@example.com"

# GitHub Configuration
export GITHUB_TOKEN="your-github-personal-access-token"
export GITHUB_USERNAME="your-github-username"

# API Keys and Tokens
export OPENAI_API_KEY="your-openai-api-key"
export ANTHROPIC_API_KEY="your-anthropic-api-key"

# Development Settings
export EDITOR="helix"  # or cursor, vim, etc.
export DEFAULT_SHELL="/bin/bash"

# AWS Configuration (if needed)
export AWS_ACCESS_KEY_ID="your-aws-access-key"
export AWS_SECRET_ACCESS_KEY="your-aws-secret-key"
export AWS_DEFAULT_REGION="us-east-1"

# Docker Hub (if needed)
export DOCKER_USERNAME="your-docker-username"
export DOCKER_PASSWORD="your-docker-password"

# NPM Registry Token (if needed)
export NPM_TOKEN="your-npm-token"

# Turso Database (if needed)
export TURSO_DATABASE_URL="your-turso-database-url"
export TURSO_AUTH_TOKEN="your-turso-auth-token"

# Custom paths
export WORKSPACE_DIR="$HOME/workspace"
export PROJECTS_DIR="$HOME/projects"

# Feature flags
export INSTALL_OPTIONAL_TOOLS="true"
export USE_LATEST_VERSIONS="true"
export ENABLE_TELEMETRY="false"
EOF
    echo -e "${GREEN}‚úì Created $MASTER_CNF${NC}"
else
    echo -e "${YELLOW}Master configuration file already exists, skipping...${NC}"
fi

# Create cookbook.yaml for machine-specific recipes
if [ ! -f "$COOKBOOK_YAML" ]; then
    echo -e "${YELLOW}Creating machine cookbook...${NC}"
    cat > "$COOKBOOK_YAML" << 'EOF'
# Machine-specific recipe cookbook
# List the recipes you want to install on this machine

recipes:
  # Core system recipes (recommended for all machines)
  - base
  - git
  - ssh
  
  # Development tools (customize as needed)
  - docker
  - golang
  - rust
  - nvm
  
  # Productivity tools (customize as needed)
  - obsidian
  - bruno
  - cursor
  
  # Terminal tools (customize as needed)
  - fzf
  - ripgrep
  - lazygit
  
  # Add or remove recipes based on your needs
  # Available recipes are defined in the main recipes.yaml file
  # 
  # Examples:
  # - flatpak      # AppImage management
  # - chrome       # Web browser
  # - slack        # Communication
  # - 1password    # Password management
  # - rustdesk     # Remote desktop
EOF
        echo -e "${GREEN}‚úì Created $COOKBOOK_YAML${NC}"
else
    echo -e "${YELLOW}Machine cookbook already exists, skipping...${NC}"
fi

# Create SSH config template
SSH_CONFIG="$SSH_DIR/config.default"
if [ ! -f "$SSH_CONFIG" ]; then
    echo -e "${YELLOW}Creating SSH configuration template...${NC}"
    cat > "$SSH_CONFIG" << 'EOF'
# SSH Configuration Template
# Copy this to 'config' and customize as needed

# GitHub
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa
    UseKeychain yes
    AddKeysToAgent yes

# Example server configuration
# Host myserver
#     HostName server.example.com
#     User myusername
#     Port 22
#     IdentityFile ~/.ssh/id_rsa
EOF
    echo -e "${GREEN}‚úì Created $SSH_CONFIG${NC}"
else
    echo -e "${YELLOW}SSH configuration template already exists, skipping...${NC}"
fi

# Create README for machine directory
if [ ! -f "$MACHINE_README" ]; then
    echo -e "${YELLOW}Creating machine directory README...${NC}"
    cat > "$MACHINE_README" << EOF
# Machine Configuration: $MACHINE

This directory contains configuration files and sensitive data for the '$MACHINE' machine that will be encrypted when you run \`resetup pack $MACHINE\`.

## Structure

- \`master.cnf\` - Main configuration file with environment variables
- \`cookbook.yaml\` - List of recipes to install on this machine  
- \`files/\` - Directory for configuration files, dotfiles, SSH keys, etc.
- \`files/.ssh/\` - SSH keys and configuration

## Getting Started

1. Edit \`master.cnf\` with your personal settings
2. Customize \`cookbook.yaml\` with the recipes you want on this machine
3. Copy your SSH keys to \`files/.ssh/\`
4. Add any dotfiles or configuration files to \`files/\`
5. Run \`resetup pack $MACHINE\` to encrypt everything

## Security Note

Never commit unencrypted files from this directory to version control. Always use \`resetup pack $MACHINE\` to encrypt your data first.
EOF
    echo -e "${GREEN}‚úì Created $MACHINE_README${NC}"
else
    echo -e "${YELLOW}Machine directory README already exists, skipping...${NC}"
fi

echo ""
echo -e "${GREEN}‚úÖ Machine '$MACHINE' initialized successfully!${NC}"
echo ""
echo -e "${BLUE}Next steps:${NC}"
echo "1. Edit ${YELLOW}machines/$MACHINE/master.cnf${NC} with your settings"
echo "2. Customize ${YELLOW}machines/$MACHINE/cookbook.yaml${NC} with desired recipes"
echo "3. Copy your SSH keys to ${YELLOW}machines/$MACHINE/files/.ssh/${NC}"
echo "4. Add dotfiles and config files to ${YELLOW}machines/$MACHINE/files/${NC}"
echo "5. Run ${YELLOW}resetup pack $MACHINE${NC} to encrypt your configuration"
echo "6. Run ${YELLOW}resetup $MACHINE${NC} to set up this machine"
echo ""

# Return to original directory
cd $CWD
#!/usr/bin/env bash

# VARS
CWD=$(pwd)
BASE_PATH=$(dirname $(dirname $(readlink -f $0)))

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse machine parameter (required)
if [ $# -lt 1 ]; then
    echo -e "${RED}‚ùå Error: Machine name is required${NC}"
    echo "Usage: resetup init <machine>"
    exit 1
fi

MACHINE="$1"

echo -e "${BLUE}üöÄ Initializing machine '$MACHINE'...${NC}"

# Set up paths
MACHINE_DIR="$BASE_PATH/machines/$MACHINE"
FILES_DIR="$MACHINE_DIR/files"
SSH_DIR="$FILES_DIR/.ssh"
MASTER_CNF="$MACHINE_DIR/master.cnf"
COOKBOOK_YAML="$MACHINE_DIR/cookbook.yaml"
MACHINE_README="$MACHINE_DIR/README.md"

echo ""
echo -e "${YELLOW}Creating directory structure...${NC}"
mkdir -p "$MACHINE_DIR"
mkdir -p "$FILES_DIR"
mkdir -p "$SSH_DIR"

# Create master.cnf from template
if [ ! -f "$MASTER_CNF" ]; then
    echo -e "${YELLOW}Creating master configuration file...${NC}"
    cat > "$MASTER_CNF" << 'EOF'
#!/usr/bin/env bash

# Master configuration file for resetup
# Customize with your personal settings

# WiFi Configuration (optional)
export WIFI_ID="Your-WiFi-Network"
export WIFI_PASSWORD="your-wifi-password"

# Git Configuration
export GIT_USERNAME="Your Name"
export GIT_EMAIL="your.email@example.com"

# GitHub Configuration
export GITHUB_TOKEN="your-github-personal-access-token"
export GITHUB_USERNAME="your-github-username"

# API Keys and Tokens
export OPENAI_API_KEY="your-openai-api-key"
export ANTHROPIC_API_KEY="your-anthropic-api-key"

# Development Settings
export EDITOR="helix"  # or vim, nano, etc.
export DEFAULT_SHELL="/bin/bash"

# AWS Configuration (if needed)
export AWS_ACCESS_KEY_ID="your-aws-access-key"
export AWS_SECRET_ACCESS_KEY="your-aws-secret-key"
export AWS_DEFAULT_REGION="us-east-1"

# Docker Hub (if needed)
export DOCKER_USERNAME="your-docker-username"
export DOCKER_PASSWORD="your-docker-password"

# NPM Registry Token (if needed)
export NPM_TOKEN="your-npm-token"

# Turso Database (if needed)
export TURSO_DATABASE_URL="your-turso-database-url"
export TURSO_AUTH_TOKEN="your-turso-auth-token"

# Custom paths
export WORKSPACE_DIR="$HOME/workspace"
export PROJECTS_DIR="$HOME/projects"

# Feature flags
export INSTALL_OPTIONAL_TOOLS="true"
export USE_LATEST_VERSIONS="true"
export ENABLE_TELEMETRY="false"
EOF
    echo -e "${GREEN}‚úì Created $MASTER_CNF${NC}"
else
    echo -e "${YELLOW}Master configuration file already exists, skipping...${NC}"
fi

# Create cookbook.yaml for machine-specific recipes
if [ ! -f "$COOKBOOK_YAML" ]; then
    echo -e "${YELLOW}Creating machine cookbook with all available recipes...${NC}"
    
    # Generate cookbook.yaml dynamically from recipes.yaml
    cat > "$COOKBOOK_YAML" << 'EOF'
# Machine-specific recipe cookbook
# All available recipes are listed below - uncomment the ones you want to install
# Comment out (prefix with #) recipes you don't need on this machine

recipes:
EOF
    
    # Use yq to parse recipes.yaml and organize by tags
    RECIPES_FILE="$BASE_PATH/recipes.yaml"
    
    if command -v yq >/dev/null 2>&1 && [ -f "$RECIPES_FILE" ]; then
        # Create temporary files to categorize recipes
        TEMP_DIR=$(mktemp -d)
        
        # Extract all recipes with their tags and organize them
        yq eval '.recipes[] | [.name, .description, (.tags | join(","))] | @tsv' "$RECIPES_FILE" > "$TEMP_DIR/all_recipes.tsv"
        
        # Track processed recipes to avoid duplicates
        > "$TEMP_DIR/processed_recipes.txt"
        
        echo "  # Core system recipes (recommended for all machines)" >> "$COOKBOOK_YAML"
        while IFS=$'\t' read -r name description tags; do
            if [[ "$tags" == *"core"* ]]; then
                echo "  - $name  # $description" >> "$COOKBOOK_YAML"
                echo "$name" >> "$TEMP_DIR/processed_recipes.txt"
            fi
        done < "$TEMP_DIR/all_recipes.tsv"
        
        echo "" >> "$COOKBOOK_YAML"
        echo "  # Development tools" >> "$COOKBOOK_YAML"
        while IFS=$'\t' read -r name description tags; do
            if [[ "$tags" == *"development"* && "$tags" != *"core"* ]] && ! grep -q "^$name$" "$TEMP_DIR/processed_recipes.txt"; then
                echo "  - $name  # $description" >> "$COOKBOOK_YAML"
                echo "$name" >> "$TEMP_DIR/processed_recipes.txt"
            fi
        done < "$TEMP_DIR/all_recipes.tsv"
        
        echo "" >> "$COOKBOOK_YAML"
        echo "  # Security tools" >> "$COOKBOOK_YAML"
        while IFS=$'\t' read -r name description tags; do
            if [[ "$tags" == *"security"* && "$tags" != *"core"* ]] && ! grep -q "^$name$" "$TEMP_DIR/processed_recipes.txt"; then
                echo "  - $name  # $description" >> "$COOKBOOK_YAML"
                echo "$name" >> "$TEMP_DIR/processed_recipes.txt"
            fi
        done < "$TEMP_DIR/all_recipes.tsv"
        
        echo "" >> "$COOKBOOK_YAML"
        echo "  # Communication tools" >> "$COOKBOOK_YAML"
        while IFS=$'\t' read -r name description tags; do
            if [[ "$tags" == *"communication"* ]] && ! grep -q "^$name$" "$TEMP_DIR/processed_recipes.txt"; then
                echo "  - $name  # $description" >> "$COOKBOOK_YAML"
                echo "$name" >> "$TEMP_DIR/processed_recipes.txt"
            fi
        done < "$TEMP_DIR/all_recipes.tsv"
        
        echo "" >> "$COOKBOOK_YAML"
        echo "  # Browsers" >> "$COOKBOOK_YAML"
        while IFS=$'\t' read -r name description tags; do
            if [[ "$tags" == *"browser"* ]] && ! grep -q "^$name$" "$TEMP_DIR/processed_recipes.txt"; then
                echo "  - $name  # $description" >> "$COOKBOOK_YAML"
                echo "$name" >> "$TEMP_DIR/processed_recipes.txt"
            fi
        done < "$TEMP_DIR/all_recipes.tsv"
        
        echo "" >> "$COOKBOOK_YAML"
        echo "  # Terminal tools" >> "$COOKBOOK_YAML"
        while IFS=$'\t' read -r name description tags; do
            if [[ ("$tags" == *"terminal"* || ("$tags" == *"cli"* && "$tags" != *"core"* && "$tags" != *"development"*)) ]] && ! grep -q "^$name$" "$TEMP_DIR/processed_recipes.txt"; then
                echo "  - $name  # $description" >> "$COOKBOOK_YAML"
                echo "$name" >> "$TEMP_DIR/processed_recipes.txt"
            fi
        done < "$TEMP_DIR/all_recipes.tsv"
        
        echo "" >> "$COOKBOOK_YAML"
        echo "  # Productivity tools" >> "$COOKBOOK_YAML"
        while IFS=$'\t' read -r name description tags; do
            if [[ "$tags" == *"productivity"* ]] && ! grep -q "^$name$" "$TEMP_DIR/processed_recipes.txt"; then
                echo "  - $name  # $description" >> "$COOKBOOK_YAML"
                echo "$name" >> "$TEMP_DIR/processed_recipes.txt"
            fi
        done < "$TEMP_DIR/all_recipes.tsv"
        
        echo "" >> "$COOKBOOK_YAML"
        echo "  # Other tools and utilities" >> "$COOKBOOK_YAML"
        while IFS=$'\t' read -r name description tags; do
            if ! grep -q "^$name$" "$TEMP_DIR/processed_recipes.txt"; then
                echo "  - $name  # $description" >> "$COOKBOOK_YAML"
                echo "$name" >> "$TEMP_DIR/processed_recipes.txt"
            fi
        done < "$TEMP_DIR/all_recipes.tsv"
        
        # Clean up
        rm -rf "$TEMP_DIR"
        
        echo "" >> "$COOKBOOK_YAML"
        cat >> "$COOKBOOK_YAML" << 'EOF'

# Usage:
# 1. Uncomment (remove #) recipes you want to install on this machine
# 2. Comment out (add #) recipes you don't need
# 3. Run 'resetup pack [machine]' to encrypt your configuration
# 4. Run 'resetup [machine]' to install selected recipes
#
# Note: Dependencies will be installed automatically
EOF
    else
        # Fallback to static list if yq is not available
        echo "  # Note: yq not available, showing basic recipe list" >> "$COOKBOOK_YAML"
        echo "  # Edit this file to select recipes you want on this machine" >> "$COOKBOOK_YAML"
        echo "" >> "$COOKBOOK_YAML"
        cat >> "$COOKBOOK_YAML" << 'EOF'
  # Core system recipes (recommended for all machines)
  - base         # Base system packages and configurations
  - git          # Git configuration with user settings
  - ssh          # SSH key setup and configuration
  
  # Development tools
  - docker       # Docker container platform
  - golang       # Go programming language
  - rust         # Rust programming language and cargo
  - nvm          # Node Version Manager for Node.js
  - deno         # Deno JavaScript/TypeScript runtime
  - gh           # GitHub CLI - official GitHub command line tool
  
  # Productivity tools
  - obsidian     # Obsidian knowledge base
  - bruno        # Bruno API client (AppImage)
  - cursor       # Cursor AI-powered code editor (AppImage)
  - 1password    # 1Password password manager
  
  # Terminal tools
  - fzf          # Fuzzy finder for command line
  - ripgrep      # Fast recursive grep alternative
  - lazygit      # Terminal UI for git commands
  - lf           # Terminal file manager
  - ghostty      # GPU-accelerated terminal emulator
  
  # Communication
  - slack        # Slack team communication
  - discord      # Discord voice and text chat
  
  # Browsers
  - chrome       # Google Chrome browser
  
  # Utilities
  - flatpak      # Flatpak package manager with Gear Lever AppImage integration
  - ngrok        # Secure tunnels to localhost
  - turso        # Turso edge database
  - rustdesk     # Open source remote desktop
  - youtube-downloader  # YouTube video downloader
  - cascadia-font       # Cascadia Code Nerd Font for development
  - jaq                 # Fast JSON processor (Rust-based jq alternative)
  - claude-code         # Claude Code AI assistant CLI
  - firefoo             # Firebase client
  - firebase-tools      # Firebase CLI for deploying and managing Firebase projects
  - wifi                # Automatic WiFi network connection
EOF
    fi
    
    echo -e "${GREEN}‚úì Created $COOKBOOK_YAML with all available recipes${NC}"
else
    echo -e "${YELLOW}Machine cookbook already exists, skipping...${NC}"
fi

# Create SSH config template
SSH_CONFIG="$SSH_DIR/config.default"
if [ ! -f "$SSH_CONFIG" ]; then
    echo -e "${YELLOW}Creating SSH configuration template...${NC}"
    cat > "$SSH_CONFIG" << 'EOF'
# SSH Configuration Template
# Copy this to 'config' and customize as needed

# GitHub
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa
    UseKeychain yes
    AddKeysToAgent yes

# Example server configuration
# Host myserver
#     HostName server.example.com
#     User myusername
#     Port 22
#     IdentityFile ~/.ssh/id_rsa
EOF
    echo -e "${GREEN}‚úì Created $SSH_CONFIG${NC}"
else
    echo -e "${YELLOW}SSH configuration template already exists, skipping...${NC}"
fi

# Create README for machine directory
if [ ! -f "$MACHINE_README" ]; then
    echo -e "${YELLOW}Creating machine directory README...${NC}"
    cat > "$MACHINE_README" << EOF
# Machine Configuration: $MACHINE

This directory contains configuration files and sensitive data for the '$MACHINE' machine that will be encrypted when you run \`resetup pack $MACHINE\`.

## Structure

- \`master.cnf\` - Main configuration file with environment variables
- \`cookbook.yaml\` - List of recipes to install on this machine  
- \`files/\` - Directory for configuration files, dotfiles, SSH keys, etc.
- \`files/.ssh/\` - SSH keys and configuration

## Getting Started

1. Edit \`master.cnf\` with your personal settings
2. Customize \`cookbook.yaml\` with the recipes you want on this machine
3. Copy your SSH keys to \`files/.ssh/\`
4. Add any dotfiles or configuration files to \`files/\`
5. Run \`resetup pack $MACHINE\` to encrypt everything

## Security Note

Never commit unencrypted files from this directory to version control. Always use \`resetup pack $MACHINE\` to encrypt your data first.
EOF
    echo -e "${GREEN}‚úì Created $MACHINE_README${NC}"
else
    echo -e "${YELLOW}Machine directory README already exists, skipping...${NC}"
fi

echo ""
echo -e "${GREEN}‚úÖ Machine '$MACHINE' initialized successfully!${NC}"
echo ""
echo -e "${BLUE}Next steps:${NC}"
echo -e "1. Edit ${YELLOW}machines/$MACHINE/master.cnf${NC} with your settings"
echo -e "2. Customize ${YELLOW}machines/$MACHINE/cookbook.yaml${NC} with desired recipes"
echo -e "3. Copy your SSH keys to ${YELLOW}machines/$MACHINE/files/.ssh/${NC}"
echo -e "4. Add dotfiles and config files to ${YELLOW}machines/$MACHINE/files/${NC}"
echo -e "5. Run ${YELLOW}resetup pack $MACHINE${NC} to encrypt your configuration"
echo -e "6. Run ${YELLOW}resetup $MACHINE${NC} to set up this machine"
echo ""

# Return to original directory
cd $CWD
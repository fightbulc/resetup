#!/usr/bin/env bash

set -e

# Parse machine parameter (required)
if [ $# -lt 1 ]; then
    echo "‚ùå Error: Machine name is required"
    echo "Usage: resetup recipes <machine> [recipe1] [recipe2] ..."
    exit 1
fi

MACHINE="$1"
shift

# Check for -y and -f flags anywhere in remaining arguments
AUTO_CONFIRM=false
FORCE_REINSTALL=false
RECIPE_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -y)
            AUTO_CONFIRM=true
            shift
            ;;
        -f)
            FORCE_REINSTALL=true
            shift
            ;;
        *)
            RECIPE_ARGS+=("$1")
            shift
            ;;
    esac
done

# Restore positional parameters from RECIPE_ARGS
set -- "${RECIPE_ARGS[@]}"


#
# CHECK PACKAGES
#

# Check if we have the correct yq (Go-based, not Python-based)
if ! /usr/local/bin/yq --version &> /dev/null || ! /usr/local/bin/yq eval '.test' <<< 'test: value' &> /dev/null; then
    echo "Go-based yq is required but not installed. Installing..."
    sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    sudo chmod +x /usr/local/bin/yq
    echo "‚úÖ Go-based yq installed successfully"
fi

# Ensure we use the correct yq
export PATH="/usr/local/bin:$PATH"

#
# SET BASE VARIABLES
#

BASE_PATH=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && cd .. && pwd)

# Set machine-specific paths
MACHINE_DIR="$BASE_PATH/machines/$MACHINE"
MASTER_CNF_PATH="$MACHINE_DIR/master.cnf"
COOKBOOK_PATH="$MACHINE_DIR/cookbook.yaml"
SOURCE_DIR="$BASE_PATH/source-$MACHINE"
INSTALLED_RECIPES_FILE="$MACHINE_DIR/.installed_recipes"

echo "üì± Using machine configuration: $MACHINE"

RECIPES_CONFIG="$BASE_PATH/recipes.yaml"

#
# CHECK REQUIREMENTS
#

if [ ! -f "$MASTER_CNF_PATH" ]; then
    echo "‚ùå Master config not found at: $MASTER_CNF_PATH"
    echo "Please run 'resetup unpack $MACHINE' first to decrypt your configuration"
    echo "Or run 'resetup init $MACHINE' to create a new machine configuration"
    exit 1
fi

if [ ! -f "$RECIPES_CONFIG" ]; then
    echo "‚ùå Recipes configuration not found at: $RECIPES_CONFIG"
    exit 1
fi

# Check cookbook exists
if [ ! -f "$COOKBOOK_PATH" ]; then
    echo "‚ùå Machine cookbook not found at: $COOKBOOK_PATH"
    echo "Please run 'resetup init $MACHINE' to create the cookbook"
    exit 1
fi

#
# CREATE SOURCE DIRECTORY
#

mkdir -p "$SOURCE_DIR"

#
# FUNCTIONS
#

run_recipe() {
    local recipe_name=$1

    local recipe_script
    recipe_script=$(yq eval ".recipes[] | select(.name == \"$recipe_name\") | .script" "$RECIPES_CONFIG")

    local recipe_desc
    recipe_desc=$(yq eval ".recipes[] | select(.name == \"$recipe_name\") | .description" "$RECIPES_CONFIG")
    
    if [ -z "$recipe_script" ]; then
        echo "Recipe '$recipe_name' not found in configuration"
        return 1
    fi
    
    local script_path="$BASE_PATH/recipes/$recipe_script"
    
    if [ ! -f "$script_path" ]; then
        echo "Recipe script not found: $script_path"
        return 1
    fi
    
    echo ""
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë Recipe: $recipe_name"
    echo "‚ïë Description: $recipe_desc"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo ""
    
    if [[ "$AUTO_CONFIRM" == "true" ]]; then
        echo "Auto-confirming recipe: $recipe_name"
    else
        read -p "Run this recipe? [Y/n] " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            echo "Skipping $recipe_name"
            return 2  # Return special code for skipped recipes
        fi
    fi
    
    bash "$script_path" "$MASTER_CNF_PATH" "$BASE_PATH"
    
    # Source bashrc after each recipe to pick up any environment changes
    # shellcheck source=/dev/null
    source ~/.bashrc 2>/dev/null || true
}

get_recipe_dependencies() {
    local recipe_name=$1
    yq eval ".recipes[] | select(.name == \"$recipe_name\") | .dependencies[]" "$RECIPES_CONFIG" 2>/dev/null || true
}

is_recipe_installed() {
    local recipe_name=$1
    
    if [ -f "$INSTALLED_RECIPES_FILE" ] && grep -q "^$recipe_name$" "$INSTALLED_RECIPES_FILE"; then
        return 0
    fi
    return 1
}

mark_recipe_installed() {
    local recipe_name=$1
    # Ensure directory exists
    mkdir -p "$(dirname "$INSTALLED_RECIPES_FILE")"
    echo "$recipe_name" >> "$INSTALLED_RECIPES_FILE"
}

install_recipe_with_deps() {
    local recipe_name=$1
    local visited_file
    visited_file=$(mktemp)
    
    _install_recipe_recursive "$recipe_name" "$visited_file"
    
    rm -f "$visited_file"
}

_install_recipe_recursive() {
    local recipe_name=$1
    local visited_file=$2
    
    # Check if already visited (circular dependency check)
    if grep -q "^$recipe_name$" "$visited_file" 2>/dev/null; then
        return 0
    fi
    echo "$recipe_name" >> "$visited_file"
    
    # Check if already installed (unless force reinstall is enabled)
    if [[ "$FORCE_REINSTALL" == "false" ]] && is_recipe_installed "$recipe_name"; then
        echo "Recipe '$recipe_name' is already installed"
        return 0
    elif [[ "$FORCE_REINSTALL" == "true" ]] && is_recipe_installed "$recipe_name"; then
        echo "Force reinstalling recipe '$recipe_name'"
    elif [[ "$FORCE_REINSTALL" == "true" ]]; then
        echo "Installing recipe '$recipe_name'"
    fi
    
    # Install dependencies first
    local deps
    deps=$(get_recipe_dependencies "$recipe_name")
    if [ -n "$deps" ]; then
        for dep in $deps; do
            if [ -n "$dep" ]; then
                _install_recipe_recursive "$dep" "$visited_file"
                # Refresh environment after each dependency to ensure 
                # environment changes are available to subsequent recipes
                # shellcheck source=/dev/null
                source ~/.bashrc 2>/dev/null || true
            fi
        done
    fi
    
    # Install the recipe
    run_recipe "$recipe_name"
    local recipe_status=$?
    
    # Only mark as installed if recipe was actually run (not skipped)
    if [ $recipe_status -eq 0 ]; then
        mark_recipe_installed "$recipe_name"
    elif [ $recipe_status -eq 2 ]; then
        echo "Recipe '$recipe_name' was skipped by user"
    else
        echo "Recipe '$recipe_name' failed with status $recipe_status"
        return $recipe_status
    fi
}

#
# MAIN LOGIC
#

if [ $# -eq 1 ]; then
    # Install specific recipe with dependencies
    RECIPE_NAME="$1"
    install_recipe_with_deps "$RECIPE_NAME"
    
    # Show completion message for single recipe
    echo ""
    echo "=============================================="
    echo "‚úÖ RECIPE INSTALLATION COMPLETE!"
    echo "=============================================="
    echo ""
    echo "üì¶ Recipe '$RECIPE_NAME' installed successfully"
    echo ""
    echo "üîÑ Refreshing environment..."
    # shellcheck source=/dev/null
    source ~/.bashrc 2>/dev/null || true
    echo ""
    echo "üéâ Ready to use $RECIPE_NAME!"
    echo ""
    exit 0
elif [ $# -gt 1 ]; then
    # Install multiple specific recipes
    echo ""
    echo "üöÄ Installing $# specified recipes..."
    echo ""
    
    for RECIPE_NAME in "$@"; do
        install_recipe_with_deps "$RECIPE_NAME"
    done
    
    # Show completion message for multiple recipes
    echo ""
    echo "=============================================="
    echo "‚úÖ RECIPE INSTALLATION COMPLETE!"
    echo "=============================================="
    echo ""
    echo "üì¶ $# recipes installed successfully"
    echo ""
    echo "üîÑ Refreshing environment..."
    # shellcheck source=/dev/null
    source ~/.bashrc 2>/dev/null || true
    echo ""
    echo "üéâ Ready to use your tools!"
    echo ""
    exit 0
else
    # Install recipes from machine cookbook
    COOKBOOK_RECIPES=$(yq eval '.recipes[]' "$COOKBOOK_PATH" 2>/dev/null || echo "")
    
    if [ -z "$COOKBOOK_RECIPES" ]; then
        echo ""
        echo "üìù No recipes specified in cookbook: $COOKBOOK_PATH"
        echo "   Edit the cookbook to add recipes you want to install"
        echo ""
        exit 0
    fi
    
    TOTAL_RECIPES=$(echo "$COOKBOOK_RECIPES" | wc -w)
    echo ""
    echo "üöÄ Installing $TOTAL_RECIPES recipes from machine '$MACHINE' cookbook..."
    echo "   This may take several minutes depending on your system"
    echo ""
    
    for recipe_name in $COOKBOOK_RECIPES; do
        install_recipe_with_deps "$recipe_name"
    done
fi

#
# CLEANUP
#

rm -rf "$SOURCE_DIR"

#
# SOURCE BASHRC
#

echo ""
echo "=================================================="
echo "üéâ MACHINE '$MACHINE' SETUP COMPLETE!"
echo "=================================================="
echo ""

# Count installed recipes
INSTALLED_COUNT=$(wc -l < "$INSTALLED_RECIPES_FILE" 2>/dev/null || echo "0")
echo "üìä Summary:"
echo "   ‚Ä¢ Machine: $MACHINE"
echo "   ‚Ä¢ $INSTALLED_COUNT recipes installed successfully"
echo "   ‚Ä¢ Environment configured and ready"
echo ""

echo "üîÑ Refreshing environment..."
# shellcheck source=/dev/null
source ~/.bashrc

echo ""
echo "‚úÖ Your '$MACHINE' machine is now set up!"
echo ""
echo "üí° What's next?"
echo "   ‚Ä¢ Open a new terminal to ensure all changes take effect"
echo "   ‚Ä¢ Check installed tools with: which node, which docker, etc."
echo "   ‚Ä¢ Review ~/.bashrc for any customizations"
echo "   ‚Ä¢ Customize machines/$MACHINE/cookbook.yaml for future installs"
echo ""
echo "üöÄ Happy coding!"
echo ""
#!/usr/bin/env bash

set -e

# VARS
CWD=$(pwd)
BASE_PATH=$(dirname $(readlink -f $0))

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Help function
show_help() {
    echo -e "${BLUE}Resetup - Development Machine Setup Tool${NC}"
    echo ""
    echo "Usage: $0 <command> <machine> [options]"
    echo ""
    echo "Commands:"
    echo "  init <machine>           Initialize machine configuration"
    echo "  pack <machine>           Encrypt machine configuration files"
    echo "  unpack <machine>         Decrypt configuration and install everything"
    echo "  recipes <machine> [...]  Install specific recipes on machine"
    echo "                           Options: -y (auto-confirm), -f (force), --force-all (force all)"
    echo "  refresh <machine>        Update recipes and test them"
    echo "  clean <machine>          Reset machine installation tracking"
    echo "  list                     List all available machines"
    echo "  clone <src> <dst>        Clone machine configuration"
    echo "  delete <machine>         Delete machine configuration"
    echo "  help                     Show this help message"
    echo ""
    echo "Shortcuts:"
    echo "  $0 <machine>             Same as 'unpack <machine>'"
    echo "  $0 <machine> -y          Same as 'unpack <machine> -y'"
    echo ""
    echo "Examples:"
    echo "  $0 init laptop                    # Initialize laptop machine"
    echo "  $0 pack laptop                    # Pack laptop configuration"
    echo "  $0 unpack laptop                  # Unpack laptop configuration"
    echo "  $0 laptop                         # Same as 'unpack laptop'"
    echo "  $0 laptop -y                      # Unpack laptop with auto-confirm"
    echo "  $0 recipes laptop base git docker # Install recipes on laptop"
    echo "  $0 recipes laptop bruno -f        # Force reinstall bruno on laptop"
    echo "  $0 recipes laptop git --force-all # Force reinstall git and all dependencies"
    echo "  $0 list                           # Show available machines"
    echo "  $0 clone laptop server            # Copy laptop config to server"
}

# Define known commands (including both old and new versions for backward compatibility)
KNOWN_COMMANDS=("init" "pack" "unpack" "recipes" "refresh" "clean" "list-machines" "list" "clone-machine" "clone" "delete-machine" "delete" "help" "--help" "-h")

# Check if command is provided
if [ $# -eq 0 ]; then
    echo -e "${RED}Error: No command specified${NC}"
    echo ""
    show_help
    exit 1
fi

# Function to check if argument is a known command
is_known_command() {
    local cmd="$1"
    for known_cmd in "${KNOWN_COMMANDS[@]}"; do
        if [[ "$cmd" == "$known_cmd" ]]; then
            return 0
        fi
    done
    return 1
}

# Parse command and machine
COMMAND=""
MACHINE=""

# Check if first argument is a known command
if is_known_command "$1"; then
    COMMAND="$1"
    shift
    
    # Handle machine parameter for commands that need it
    if [[ "$COMMAND" == "clone-machine" || "$COMMAND" == "clone" ]]; then
        # clone takes two machine arguments
        if [ $# -lt 2 ]; then
            echo -e "${RED}Error: clone requires source and destination machine names${NC}"
            exit 1
        fi
        SOURCE_MACHINE="$1"
        DEST_MACHINE="$2"
        shift 2
    elif [[ "$COMMAND" == "delete-machine" || "$COMMAND" == "delete" ]]; then
        # delete takes one machine argument
        if [ $# -lt 1 ]; then
            echo -e "${RED}Error: delete requires machine name${NC}"
            exit 1
        fi
        MACHINE="$1"
        shift
    elif [[ "$COMMAND" != "list-machines" && "$COMMAND" != "list" && "$COMMAND" != "help" && "$COMMAND" != "--help" && "$COMMAND" != "-h" ]]; then
        # All other commands require a machine name
        if [ $# -lt 1 ]; then
            echo -e "${RED}Error: $COMMAND requires a machine name${NC}"
            echo ""
            show_help
            exit 1
        fi
        MACHINE="$1"
        shift
    fi
else
    # First argument is not a known command, treat as machine name for unpack shortcut
    if [ $# -gt 0 ]; then
        MACHINE="$1"
        COMMAND="unpack"
        shift
    else
        echo -e "${RED}Error: No command or machine specified${NC}"
        echo ""
        show_help
        exit 1
    fi
fi

# Execute the appropriate command
case $COMMAND in
    init)
        exec "$BASE_PATH/scripts/init" "$MACHINE" "$@"
        ;;
    pack)
        echo -e "${BLUE}üì¶ Packing machine '$MACHINE' configuration...${NC}"
        exec "$BASE_PATH/scripts/pack" "$MACHINE" "$@"
        ;;
    unpack)
        echo -e "${BLUE}üì¶ Unpacking machine '$MACHINE' configuration...${NC}"
        exec "$BASE_PATH/scripts/unpack" "$MACHINE" "$@"
        ;;
    recipes)
        echo -e "${BLUE}üç≥ Installing recipes on machine '$MACHINE'...${NC}"
        exec "$BASE_PATH/scripts/recipes" "$MACHINE" "$@"
        ;;
    refresh)
        echo -e "${BLUE}üîÑ Refreshing recipes for machine '$MACHINE'...${NC}"
        exec "$BASE_PATH/scripts/refresh" "$MACHINE" "$@"
        ;;
    clean)
        echo -e "${BLUE}üßπ Cleaning installation tracking for machine '$MACHINE'...${NC}"
        exec "$BASE_PATH/scripts/clean" "$MACHINE" "$@"
        ;;
    list-machines|list)
        echo -e "${BLUE}üìã Listing available machines...${NC}"
        exec "$BASE_PATH/scripts/list-machines" "$@"
        ;;
    clone-machine|clone)
        echo -e "${BLUE}üìã Cloning machine '$SOURCE_MACHINE' to '$DEST_MACHINE'...${NC}"
        exec "$BASE_PATH/scripts/clone-machine" "$SOURCE_MACHINE" "$DEST_MACHINE" "$@"
        ;;
    delete-machine|delete)
        echo -e "${BLUE}üóëÔ∏è Deleting machine '$MACHINE'...${NC}"
        exec "$BASE_PATH/scripts/delete-machine" "$MACHINE" "$@"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Error: Unknown command '$COMMAND'${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
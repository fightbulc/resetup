#!/usr/bin/env bash

set -e

# VARS
CWD=$(pwd)
BASE_PATH=$(dirname $(readlink -f $0))

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Help function
show_help() {
    echo -e "${BLUE}Resetup - Development Machine Setup Tool${NC}"
    echo ""
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  init      Initialize data directory with default configuration"
    echo "  pack      Encrypt your configuration files"
    echo "  unpack    Decrypt configuration and install everything"
    echo "            Use 'unpack -y' to auto-confirm all recipes"
    echo "  recipes   Install specific recipes"
    echo "            Use '-f' to force reinstall (recipes recipe -f)"
    echo "            Use '-y' to auto-confirm all prompts"
    echo "  refresh   Update recipes and test them"
    echo "  clean     Reset installation tracking"
    echo "  -y        Shortcut for 'unpack -y'"
    echo "  help      Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 init"
    echo "  $0 pack"
    echo "  $0 unpack"
    echo "  $0 unpack -y"
    echo "  $0 -y                    # Same as 'unpack -y'"
    echo "  $0 recipes base git docker"
    echo "  $0 recipes obsidian -f   # Force reinstall obsidian"
    echo "  $0 recipes base -y -f    # Auto-confirm and force reinstall"
    echo "  $0 refresh"
    echo "  $0 clean"
}

# Check if command is provided or if -y is the first argument
if [ $# -eq 0 ]; then
    echo -e "${RED}Error: No command specified${NC}"
    echo ""
    show_help
    exit 1
fi

# Handle -y as shortcut for "unpack -y"
if [[ "$1" == "-y" ]]; then
    COMMAND="unpack"
    # Keep -y in arguments for the unpack script
else
    COMMAND=$1
    shift # Remove command from arguments
fi

# Execute the appropriate command
case $COMMAND in
    init)
        echo -e "${BLUE}üöÄ Initializing data directory...${NC}"
        exec "$BASE_PATH/scripts/init" "$@"
        ;;
    pack)
        echo -e "${BLUE}üì¶ Packing configuration...${NC}"
        exec "$BASE_PATH/scripts/pack" "$@"
        ;;
    unpack)
        echo -e "${BLUE}üì¶ Unpacking configuration...${NC}"
        exec "$BASE_PATH/scripts/unpack" "$@"
        ;;
    recipes)
        echo -e "${BLUE}üç≥ Installing recipes...${NC}"
        exec "$BASE_PATH/scripts/recipes" "$@"
        ;;
    refresh)
        echo -e "${BLUE}üîÑ Refreshing recipes...${NC}"
        exec "$BASE_PATH/scripts/refresh" "$@"
        ;;
    clean)
        echo -e "${BLUE}üßπ Cleaning installation tracking...${NC}"
        exec "$BASE_PATH/scripts/clean" "$@"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Error: Unknown command '$COMMAND'${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac